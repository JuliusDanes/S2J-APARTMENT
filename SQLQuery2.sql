--CREATE DATABASE >> DDL
--ApartmentDB
USE ApartmentDB
GO

CREATE DATABASE ApartmentDB --buat
DROP DATABASE ApartmentDB --hapus

SP_RENAMEDB Apartment, ApartmentDB --ganti nama

SP_HELPDB 'ApartmentDB'

CREATE TABLE Employee(
	EmployeeID VARCHAR(5) PRIMARY KEY,
	EmployeeName VARCHAR(100),
	EmployeeAddress VARCHAR(200),
	EmployeeTitle VARCHAR(100),
	EmployeeRate MONEY,
	ZipCode INT,
	Gender VARCHAR(10),
	DateOfBirth DATETIME
)

CREATE TABLE EMP(
	ECode INT IDENTITY(100, 1),
	EName VARCHAR(100),
	ETitle VARCHAR(100)
)

INSERT INTO EMP(EName, ETitle)
VALUES('Shafira', 'Director')
INSERT INTO EMP(EName, ETitle)
VALUES('Diaz', 'IT Director')
INSERT INTO EMP(EName, ETitle)
VALUES('Kevin', 'Marketing Director')
INSERT INTO EMP(EName, ETitle)
VALUES('Julius', 'President Director')
SELECT EName, ETitle FROM EMP

SELECT * FROM EMP

INSERT Employee
VALUES('E001', 'Shafira', 'Jakarta', 'Director', 1000, 1600, 'Female', '2000-12-03')
VALUES('E002', 'Diaz', 'Bandung', 'IT Director', 800, 1650, 'Male', '1990-11-01')
SELECT * FROM Employee

CREATE TABLE EmployeeDetails(
	EmpID UNIQUEIDENTIFIER ROWGUIDCOL NOT NULL UNIQUE,
	EmpName VARCHAR(200),
	Photo VARBINARY(MAX)
)

SP_HELP 'EmployeeDetails'

SELECT * FROM EmployeeDetails

CREATE TABLE Country(
	CountryID INT UNIQUE,
	Location GEOGRAPHY
)
SELECT * FROM Country

INSERT Country VALUES(1, NULL)
SELECT * FROM Country

CREATE TABLE Product(
	ProductID INT CONSTRAINT FKPRODID PRIMARY KEY,
	ProductName VARCHAR(200),
	Price MONEY
)

INSERT INTO Product
VALUES

SP_HELP 'Product'

CREATE TABLE Transac(
	TransID VARCHAR(100) PRIMARY KEY,
	ProductID INT CONSTRAINT FKPRODID REFERENCES Product(ProductID),
	TransDate DATETIME,
	EmployeeID VARCHAR(5) REFERENCES Employee(EmployeeID)
)


--DATABASE CARDB
CREATE DATABASE CARDB

USE CARDB
GO

CREATE TABLE PRODUCT(
	PID VARCHAR(20) PRIMARY KEY,
	PNAME VARCHAR(100) NOT NULL,
	PRICE MONEY NOT NULL,
	STOCK INT NOT NULL,	
)

ALTER TABLE PRODUCT
ADD CONSTRAINT cPID CHECK(PID LIKE 'P[0-9][0-9][0-9]')

INSERT PRODUCT VALUES('P001', 'TV LED 42 INCH', 3000000, 10)

SELECT * FROM PRODUCT

CREATE TABLE EMPLOYEE(
	EID VARCHAR(20) PRIMARY KEY,
	NAME VARCHAR(200) NOT NULL,
	TITLE VARCHAR(200) NOT NULL,
	GENDER VARCHAR(100) CONSTRAINT cGENDER CHECK(GENDER IN ('MALE', 'FEMALE')),
	AGE INT CONSTRAINT cAGE CHECK(AGE BETWEEN 20 AND 45)
)

INSERT EMPLOYEE VALUES('E001', 'SHAFIRA', 'DIRECTOR', 'FEMALE', '21')
INSERT EMPLOYEE VALUES('E002', 'DAVID', 'IT DIRECTOR', 'MALE', '25')

SELECT * FROM EMPLOYEE

CREATE TABLE TRANS(
	TRANSID VARCHAR(10) PRIMARY KEY,
	PID VARCHAR(20) CONSTRAINT fPID REFERENCES PRODUCT(PID),
	EID VARCHAR(20) CONSTRAINT fEID REFERENCES EMPLOYEE(EID),
	QTY INT DEFAULT 0
)

SELECT * FROM TRANS

INSERT TRANS(TRANSID, PID, EID) VALUES('T001', 'P001', 'E002')

SELECT * INTO EMPLOYEEBACKUP FROM EMPLOYEE
SELECT * FROM EMPLOYEEBACKUP

CREATE TABLE COMPANY(
	CID INT IDENTITY PRIMARY KEY,
	CNAME VARCHAR(200)
)

INSERT COMPANY VALUES('PT. MAJU JAYA')
INSERT COMPANY VALUES('PT. MAJU MUNDUR', GEOGRAPHY::PARSE('POINT(-38 80)'))
SELECT * FROM COMPANY

ALTER TABLE COMPANY
ADD CLOCATION GEOGRAPHY

SELECT * FROM PRODUCT

UPDATE PRODUCT
SET STOCK = 15, PNAME = 'TV LED 60 INCH'
WHERE PID = 'P001'

UPDATE EMPLOYEE
SET AGE = 20
WHERE EID = 'E001'

SELECT * FROM EMPLOYEE

INSERT PRODUCT VALUES('P002', 'MONITOR 42 INCH', 1000000, 10)
INSERT PRODUCT VALUES('P003', 'IPHONE', 1000000, 10)
INSERT PRODUCT VALUES('P004', 'MACBOOK', 1000000, 10)

DELETE PRODUCT
WHERE PID = 'P004' OR PID = 'P002'

SELECT * FROM PRODUCT

SELECT * FROM PRODUCT, TRANS

SELECT DATEADD(YY, -60, GETDATE())

TRUNCATE TABLE TRANS --hapus semua record

SELECT * FROM TRANS

--Jika ROLLBACK, maka ada konflik rule / relation


--VIEW >> Virtual table
--Data yg diambil tdk bs dari diri sendiri, Repretasi dr data yg tbl fisik, Dpt tmplkn >1 tbl, Bs hny tmpl kolom pil, bs hny kondisi tertentu, bs >1 view
--Benfefit: dt yg hny relefan ditmplkn, smbyn spesifik tbl, mengurangi proses execute, utk buat laporan
--Hrs pny grand permission, tdk bs pk order by
SELECT * FROM PRODUCT

CREATE VIEW vPRODUCT
AS SELECT * FROM PRODUCT

SELECT * FROM vPRODUCT
INSERT vPRODUCT VALUES('P002', 'TV 32 INCH LED', 2000000, 10)

SELECT * FROM TRANS
INSERT TRANS VALUES('T001', 'P001', 'E002', 1)

ALTER VIEW vTransProduct
AS SELECT PNAME FROM PRODUCT P
INNER JOIN TRANS T ON P.PID = T.PID
JOIN EMPLOYEE E ON E.EID = T.EID

SELECT * FROM vTransProduct

SP_RENAME 'vTransProduct', 'vDETAILS'
SP_RENAME vDETAILS, vTransProduct

DROP VIEW vTransProduct

--BATCHES
/*	krng network traffic, krng wkt eksus
	hrs diakhiri GO, tdk bs, tdk bs obj yg sama, tdk bs alter, tdk bs check constraint in batch same
*/

USE AdventureWorks
GO

DECLARE @RATE INT
SELECT @RATE = MAX(Rate)
FROM 

--SELECT @RATE 
--FROM HumanResources.EmployeePayHistory  ---tdk udh jln krn udh disave di batch @Rate

PRINT @RATE
GO

--IF
DECLARE @RATE MONEY
SELECT @RATE = RATE FROM HumanResources.EmployeePayHistory
WHERE EmployeeID = 23
IF @RATE < 15
	PRINT 'REVIEW OF THE RATE IS REQUIRED'
ELSE
	 PRINT 'REVIEW OF THE RATE IS NOT REQUIRED'
	 PRINT 'RATE =' + PRINT @RATE --GAB INT +DTRING --TNP BEGIN END 

GO

USE CARDB
GO

DECLARE @PID VARCHAR(5), @PNAME VARCHAR(200), @PRICE MONEY, @STOCK INT
SET @PID = 'P005'
SET @PNAME = 'WIRELESS KEYBOARD'
SET @PRICE = 300000
SET @STOCK = 5
INSERT PRODUCT VALUES(@PID, @PNAME, @PRICE, @STOCK)
SELECT * FROM PRODUCT
GO

--CASE
USE AdventureWorks

SELECT EmployeeID,'MARITAL STATUS' =
CASE MaritalStatus
	WHEN 'M' THEN 'MARRIED'
	WHEN 'S' THEN 'SINGLE'
	ELSE 'NOT SPECIFIED'
END
FROM HumanResources.Employee
GO

--WHILE >> looping
USE AdventureWorks

WHILE (SELECT AVG(Rate) + 1 FROM HumanResources.EmployeePayHistory) < 20
BEGIN
	UPDATE HumanResources.EmployeePayHistory
	SET Rate = Rate + 1 FROM HumanResources.EmployeePayHistory
	IF(SELECT MAX(Rate) + 1
		FROM HumanResources.EmployeePayHistory) > 127
	BREAK
	ELSE
	CONTINUE
END

SELECT Rate FROM HumanResources.EmployeePayHistory
WHERE Rate > 18.7588

--TRY CATCH
--tmp detail error, type error logical, 
--ERROR_LINE(); ERROR_MESSAGE(); ERROR_NUMBER(); ERROR_PROCEDURE(); ERROR SAVERITY(); ERROR_STATE();
/*	TRY >> cari kesalahan

	CATCH >> tmpl kesalahan
*/

DECLARE @VAL1 INT, @VAL2 INT, @VAL3 INT
	SET @VAL1 = 3 
	SET @VAL2 = 0 
	SET @VAL3 = @VAL1/@VAL2

	PRINT @VAL3
GO


DECLARE @VAL1 INT, @VAL2 INT, @VAL3 INT
BEGIN TRY
	SET @VAL1 = 3 
	SET @VAL2 = 0 
	SET @VAL3 = @VAL1/@VAL2

	PRINT @VAL3
END TRY
BEGIN CATCH
	PRINT 'ERROR PADA PADA BARIS KE ' + CAST(ERROR_LINE() AS VARCHAR)
	PRINT 'KEMUNGKINAN ERROR KARENA ' + CAST(ERROR_MESSAGE() AS VARCHAR)
END CATCH
GO

--RAISERROR
--Kumpul error
DECLARE @VAL1 INT, @VAL2 INT, @VAL3 INT
BEGIN TRY
	SET @VAL1 = 3 
	SET @VAL2 = 0 
		IF (@VAL2 != 0)
			RAISERROR('VAL2 IS NOT VALID', 16, 1)			
	SET @VAL3 = @VAL1/@VAL2

	PRINT @VAL3
END TRY
BEGIN CATCH
	PRINT 'ERROR PADA PADA BARIS KE ' + CAST(ERROR_LINE() AS VARCHAR)
	PRINT 'KEMUNGKINAN ERROR KARENA ' + CAST(ERROR_MESSAGE() AS VARCHAR)
END CATCH
GO


--PROCEDURE
/*	dbo.[Name_Procedure]
CREATE PROCEDURE proc_name
AS
BEGIN
	sql_statment
END
Run >> EXEC proc_name

*/

ALTER PROC spDISPLAYEDPT @KEYWORD VARCHAR(100)
AS SELECT * FROM HumanResources.Department
WHERE GROUPNAME LIKE '%' + @KEYWORD + '%'
GO

EXEC spDISPLAYEDPT 'RESEARCH'

SELECT * FROM SYSOBJECTS --tmplkn semua procedure yg sdh dibuat

--PARAMETER
CREATE PROC spUPDATEHOUR @EID INT
AS
DECLARE @HOUR INT
SELECT @HOUR = VacationHours FROM HumanResources.Employee
WHERE EmployeeID = @EID
IF(@HOUR < 20)
BEGIN
	UPDATE HumanResources.Employee
	SET VacationHours = VacationHours + 5
	WHERE Employeeid = @EID
	PRINT 'DATA SUCESSFULLY UPDATED'
	SELECT * FROM HumanResources.Employee
END
ELSE
BEGIN
	PRINT 'VACATION HOURS MORE THAN 20 HOURS'
END
GO

SELECT * FROM HumanResources.Employee

CREATE PROC spSEARCHCITY @CITY VARCHAR(100)
AS
SELECT E.EMPLOYEEID, E.TITLE, A.CITY
FROM HumanResources.Employee E
JOIN HumanResources.EmployeeAddress EA
ON E.EMPLOYEEID = EA.EMPLOYEEID
JOIN PERSON.ADDRESS A
ON A.ADDRESSID = EA.ADDRESSID
WHERE A.CITY  LIKE '%' + @CITY + '%'
GO

EXEC spSEARCHCITY 'SAN'

SELECT * FROM HumanResources.Department
SP_HELP 'HumanResources.Department'

INSERT HumanResources.Department VALUES('IT', 'INFORMATION TECNOLOGY DEPT', GETDATE())

CREATE PROC spINSERT @NAME VARCHAR(100), @GROUPNAME VARCHAR(200)
AS
INSERT HumanResources.Department
VALUES(@NAME, @GROUPNAME, GETDATE())
SELECT TOP 1 * FROM HumanResources.Department
ORDER BY ModifiedDate DESC
GO

EXEC spINSERT 'PR', 'PUBLIC RELATION'

ALTER PROC spDELETE @DID smallint
AS
DELETE HumanResources.Department
WHERE DepartmentID = @DID
PRINT 'DATA DEPARTMENT ' + @DID + ' TERHAPUS'
GO

EXEC spDELETE 10


ALTER PROC spUPDATE @DID INT, @GN VARCHAR(100)
AS
UPDATE HumanResources.Department
SET GroupName = @GN
WHERE DepartmentID = @DID
PRINT 'DATA DEPARTMENT ' + CAST(@DID AS VARCHAR(100)) + ' TERGANTI'
GO

EXEC spUPDATE 20, 'INFORMATION TECNOLOGY'
SELECT * FROM HumanResources.Department


--FUNCTION
CREATE FUNCTION HumanResources.FSEARCHNAMME(@GNAME VARCHAR(20))
RETURNS TABLE
AS
	RETURN(
		SELECT * FROM HumanResources.Department
		WHERE GroupName LIKE '%' + @GNAME + '%'
	)
	GO

SELECT * FROM HumanResources.FSEARCHNAMME('RES')






--TRIGGER
